name: "ðŸ“„ Generate Changelog - jcdcdev"
description: "Generates a changelog between two new versions"
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  previous-version:
    description: "Previous version - defaults to previous tag if not provided"
    required: false
    default: ""
  target-version:
    description: "Version"
    required: true
  github-token:
    description: "GitHub token"
    required: true
outputs:
  changelog:
    description: "Changelog"
    value: ${{ steps.changelog.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Set env
      id: set-env
      shell: bash
      run: |
        echo "TARGET_VERSION=${{ inputs.target-version }}" >> $GITHUB_ENV
        echo "PREVIOUS_VERSION=${{ inputs.previous-version }}" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - if: ${{ env.PREVIOUS_VERSION == '' }}
      shell: bash
      run: |
        echo "PREVIOUS_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> $GITHUB_ENV
    - name: Confirm previous version
      shell: bash
      run: |
        if [ -z "${{ env.PREVIOUS_VERSION }}" ]; then
          echo "No previous version found, skipping changelog generation"
          exit 1
        fi

        # if [ "$(printf '%s\n' "${{ env.PREVIOUS_VERSION }}" "${{ env.TARGET_VERSION }}" | sort -V | head -n1)" != "${{ env.PREVIOUS_VERSION }}" ]; then
        #   echo "Previous version is newer than target version, skipping changelog generation"
        #   exit 1
        # fi

        echo "Previous version: ${{ env.PREVIOUS_VERSION }}"
    - name: Generate changelog
      id: generate
      uses: jaywcjlove/changelog-generator@main
      with:
        head-ref: ${{ env.TARGET_VERSION }}
        base-ref: ${{ env.PREVIOUS_VERSION }}
        token: ${{ inputs.github-token }}
        filter-author: (jcdcdev|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
        filter: '(\+semver:\s?(breaking|major|feature|minor|fix|patch)|\+changelog-ignore:.*|Merge.*)'
        custom-emoji: "featureðŸŒŸ,nugetðŸ“¦,choreðŸ§¹"
    - name: Create Changelog Body
      shell: pwsh
      id: changelog
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: "${{ github.repository_owner }}/${{ github.event.repository.name }}"
        CHANGELOG: |
          ## ${{ inputs.target-version }}

          Compare [${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}}](https://github.com/${{ github.repository }}/compare/${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}})

          ${{ steps.generate.outputs.changelog }}
      run: |
        $changelog = "${{ env.CHANGELOG }}"

        $terms = 'close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'
        $terms | ForEach-Object {
          $changelog = $changelog -replace "($_ #(\d+))", '[Issue #$2](https://github.com/${{ env.REPO }}/issues/$2)'
        }
        
        $commit_hashes = git log --pretty=format:"%h"
        $commit_hashes | ForEach-Object {
          $commit_hash = $_
          $changelog = $changelog -replace "($commit_hash)", "[$commit_hash](https://github.com/${{ env.REPO }}/commit/$commit_hash)"
        }
        
        $changelog = $changelog -replace '\n', "`n"
        echo changelog=$changelog >> $env:GITHUB_OUTPUT