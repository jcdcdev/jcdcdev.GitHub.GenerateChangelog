name: "ðŸ“„ Generate Changelog - jcdcdev"
description: "Generates a changelog between two new versions"
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  previous-version:
    description: "Previous version - defaults to previous tag if not provided"
    required: false
    default: ""
  target-version:
    description: "Version"
    required: true
  github-token:
    description: "GitHub token"
    required: true
outputs:
  changelog:
    description: "Changelog"
    value: ${{ steps.changelog-output.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Set env
      id: set-env
      shell: bash
      run: |
        echo "TARGET_VERSION=${{ inputs.target-version }}" >> $GITHUB_ENV
        echo "PREVIOUS_VERSION=${{ inputs.previous-version }}" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - if: ${{ env.PREVIOUS_VERSION == '' }}
      id: find-previous-tag
      shell: pwsh
      env:
        Version: ${{ inputs.version }}
      run: |
        function Get-Index($originalTag) {
          Write-Host "Input is $originalTag"
          $tag = $originalTag -replace '^v'
          Write-Host "Tag is $tag"
          # Split the tag into parts
          $parts = $tag -split '\.'
      
          # Validate that there are at least three parts
          if ($parts.Count -lt 3) {
              Write-Warning "Tag '$tag' does not conform to expected SemVer format."
              return 0
          }
      
          # Convert parts to integers
          $major = [int]$parts[0]
          $minor = [int]$parts[1] -as [int]
          $patch = [int]$parts[2] -as [int]
      
          # Return a calculated version number based on SemVer rules
          $version = ($major * 10000) + ($minor * 100) + $patch
          return $version
        }

        git fetch --tags

        $allTags = @() 
        
        git tag | ForEach-Object { 
            $originalTag = $_
            $index = Get-Index $originalTag
            $tagObj = New-Object PSObject -Property @{
                Tag = $originalTag
                Index = $index
            }
            $allTags += $tagObj
        } 

        $allTags = $allTags | Sort-Object -Property Index
        # find the previous tag by selecting the version before the current one (by index)
        $index = Get-Index $env:Version
        $previousVersion = $allTags | Where-Object { $_.Index -lt $index } | Select-Object -Last 1

        if ($previousVersion -eq $null) {
          throw "No previous tag found before $env:Version"
        } 
    
        $previousTag = $previousVersion.Tag
        Write-Output "The nearest previous tag to $env:Version is $previousTag"
        echo "PREVIOUS_VERSION=$previousTag" >> $env:GITHUB_ENV
    - name: Confirm previous version
      shell: bash
      run: |
        if [ -z "${{ env.PREVIOUS_VERSION }}" ]; then
          echo "No previous version found, skipping changelog generation"
          exit 1
        fi

        echo "Previous version: ${{ env.PREVIOUS_VERSION }}"
    - name: Generate changelog
      id: generate
      uses: jaywcjlove/changelog-generator@main
      with:
        head-ref: ${{ env.TARGET_VERSION }}
        base-ref: ${{ env.PREVIOUS_VERSION }}
        token: ${{ inputs.github-token }}
        filter-author: (jcdcdev|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
        filter: '(\+semver:\s?(breaking|major|feature|minor|fix|patch)|\+changelog-ignore:.*|Merge.*)'
        custom-emoji: "featureðŸŒŸ,nugetðŸ“¦,choreðŸ§¹"
    - name: Create Changelog Body
      shell: pwsh
      id: changelog
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: "${{ github.repository_owner }}/${{ github.event.repository.name }}"
        CHANGELOG: |
          ## ${{ inputs.target-version }}

          Compare [${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}}](https://github.com/${{ github.repository }}/compare/${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}})

          ${{ steps.generate.outputs.changelog }}
      run: |
        $changelog = "${{ env.CHANGELOG }}"

        $terms = 'close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'
        $terms | ForEach-Object {
          $changelog = $changelog -replace "($_ #(\d+))", '[Issue #$2](https://github.com/${{ env.REPO }}/issues/$2)'
        }
        
        $commit_hashes = git log --pretty=format:"%h"
        $commit_hashes | ForEach-Object {
          $commit_hash = $_
          $changelog = $changelog -replace "($commit_hash)", "[$commit_hash](https://github.com/${{ env.REPO }}/commit/$commit_hash)"
        }
        
        $changelog = $changelog -replace '\n', "`n"
        Set-Content -Path ./changelog.md -Value $changelog -NoNewline

        Write-Host "CHANGELOG:`n`n$changelog`n`n"
    - name: Set Changelog Output
      shell: bash
      id: changelog-output
      run: |
        changelog=$(cat ./changelog.md)
        {
          echo 'changelog<<EOF'
          echo "${changelog}"
          echo EOF
        } >> "$GITHUB_OUTPUT"  