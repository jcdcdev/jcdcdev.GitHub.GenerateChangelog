name: "ðŸ“„ Generate Changelog - jcdcdev"
description: "Generates a changelog between two new versions"
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  previous-version:
    description: "Previous version - defaults to previous tag if not provided"
    required: false
    default: ""
  version:
    description: "Version"
    required: true
  github-token:
    description: "GitHub token"
    required: true
outputs:
  changelog:
    description: "Changelog"
    value: ${{ steps.changelog-output.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Set env
      id: set-env
      shell: bash
      run: |
        echo "TARGET_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "PREVIOUS_VERSION=${{ inputs.previous-version }}" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - if: ${{ env.PREVIOUS_VERSION == '' }}
      id: find-previous-tag
      shell: pwsh
      env:
        VERSION: ${{ inputs.version }}
      run: |
        function Pad($value, $length) {
          $value = $value.ToString()
          $valueLength = $value.Length
          for ($i = 0; $i -lt $length - $valueLength; $i++) {
              $value = "$($value)0"
          }
          return $value
        }
        
        function Get-UniqueIndex($originalTag) {
          $tag = $originalTag -replace '^v'
          $parts = $tag -split '\.'
                  
          if ($parts.Count -lt 3) {
              Write-Warning "Tag '$tag' does not conform to expected SemVer format."
              return 0
          }
                  
          $major = [int]$parts[0]
          $minor = [int]$parts[1] -as [int]
          $end = $parts[2]
          $suffixParts = $end -split '-'
          $patch = [int]$suffixParts[0] -as [int]
          $suffixString = $suffixParts[1] -as [string]
      
          $suffix = 999
          Write-Host "Suffix string is $suffixString"
          if ($suffixString -ne '') {
              $suffix = [int]($suffix -replace '[^0-9]', '')
              Write-Host "Suffix is $suffix"
          }
      
          $factor = 4
          switch -wildcard ($suffixString) {
              '*alpha*' { $factor = 1 }
              '*beta*' { $factor = 2 }
              '*rc*' { $factor = 3 }
          }
          
          $suffix = "$factor$suffix"
      
          $majorIndex = Pad $major.ToString() 3
          $minorIndex = Pad $minor.ToString() 3
          $patchIndex = Pad $patch.ToString() 3
          $suffixIndex = Pad $suffix.ToString() 4
          $index = "$majorIndex$minorIndex$patchIndex$suffixIndex"
          Write-Host "Tag '$originalTag'`n$majorIndex, $minorIndex, $patchIndex, $suffixIndex, $index`n`n"
          return $index -as [long]
        }
      
        function Get-Tags($startVersion, $endVersion) {
          Write-Host "Start version is $startVersion"
          Write-Host "End version is $endVersion"
      
          $startIndex = Get-UniqueIndex $startVersion
          $endIndex = Get-UniqueIndex $endVersion
      
          git fetch --tags --quiet
      
          $allTags = @() 
          
          git tag | ForEach-Object { 
            $originalTag = $_
            $uniqueIndex = Get-UniqueIndex $originalTag
            $tagObj = New-Object PSObject -Property @{
              Tag         = $originalTag
              UniqueIndex = $uniqueIndex
            }
            if ($uniqueIndex -ge $startIndex -and $uniqueIndex -le $endIndex) {
              $allTags += $tagObj
            }
          } 
      
          $outputTags = $allTags | Sort-Object -Property UniqueIndex
          return $outputTags
        }
        
        $tags = Get-Tags "0.0.0" "$env:VERSION"
        Write-Host "Tags to consider: $tags"
        
        $includePrerelease = $env:VERSION -match "alpha|beta|rc"
        $previousVersion = $null
        $currentVersionIndex = Get-UniqueIndex "$env:VERSION"
        for ($i = $tags.Count - 1; $i -ge 0; $i--) {
          $tag = $tags[$i]

          if($tag.UniqueIndex -ge $currentVersionIndex) {
            Write-Host "Skipping as $tag.Tag is greater than $env:VERSION"
            continue
          }

          $isPreRelease = $tag.Tag -match "alpha|beta|rc"
          if ($isPreRelease) {
            if (!$includePrerelease) {
              Write-Host "Skipping as $tag.Tag is prerelease"
              continue
            }
          }

          Write-Host "Found $tag.Tag"
          $previousVersion = $tag.Tag
          break
        }

        if ($null -eq $previousVersion) {
          throw "No previous tag found before $env:VERSION"
        } 

        Write-Host "The nearest previous tag to $env:VERSION is $previousVersion"
        echo "PREVIOUS_VERSION=$previousVersion" >> $env:GITHUB_ENV
    - name: Confirm previous version
      shell: bash
      run: |
        if [ -z "${{ env.PREVIOUS_VERSION }}" ]; then
          echo "No previous version found, skipping changelog generation"
          exit 1
        fi

        echo "Previous version: ${{ env.PREVIOUS_VERSION }}"
    - name: Generate changelog
      id: generate
      uses: jaywcjlove/changelog-generator@main
      with:
        head-ref: ${{ env.TARGET_VERSION }}
        base-ref: ${{ env.PREVIOUS_VERSION }}
        token: ${{ inputs.github-token }}
        filter-author: (jcdcdev|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
        filter: '(\+semver:\s?(breaking|major|feature|minor|fix|patch)|\+changelog-ignore:.*|Merge.*)'
        custom-emoji: "featureðŸŒŸ,nugetðŸ“¦,choreðŸ§¹"
    - name: Create Changelog Body
      shell: pwsh
      id: changelog
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: "${{ github.repository_owner }}/${{ github.event.repository.name }}"
        CHANGELOG: |
          ## ${{ inputs.target-version }}

          Compare [${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}}](https://github.com/${{ github.repository }}/compare/${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}})

          ${{ steps.generate.outputs.changelog }}
      run: |
        $changelog = "${{ env.CHANGELOG }}"

        $terms = 'close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'
        $terms | ForEach-Object {
          $changelog = $changelog -replace "($_ #(\d+))", '[Issue #$2](https://github.com/${{ env.REPO }}/issues/$2)'
        }
        
        $commit_hashes = git log --pretty=format:"%h"
        $commit_hashes | ForEach-Object {
          $commit_hash = $_
          $changelog = $changelog -replace "($commit_hash)", "[$commit_hash](https://github.com/${{ env.REPO }}/commit/$commit_hash)"
        }
        
        $changelog = $changelog -replace '\n', "`n"
        Set-Content -Path ./changelog.md -Value $changelog -NoNewline

        Write-Host "CHANGELOG:`n`n$changelog`n`n"
    - name: Set Changelog Output
      shell: bash
      id: changelog-output
      run: |
        changelog=$(cat ./changelog.md)
        {
          echo 'changelog<<EOF'
          echo "${changelog}"
          echo EOF
        } >> "$GITHUB_OUTPUT"  