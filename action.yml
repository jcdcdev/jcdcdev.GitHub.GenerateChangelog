name: "ðŸ“„ Generate Changelog - jcdcdev"
description: "Generates a changelog between two new versions"
author: "James Carter"
branding:
  icon: "refresh-cw"
  color: "gray-dark"
inputs:
  previous-version:
    description: "Previous version - defaults to previous tag if not provided"
    required: false
    default: ""
  version:
    description: "Target version"
    required: true
  head-ref:
    description: "Head ref to compare against - defaults to any tag that matches input version e.g (v1.0.0)"
    required: false
  base-ref:
    description: "Base ref to compare against - defaults to the latest tag"
    required: false
  github-token:
    description: "GitHub token"
    required: true
  include-version-as-heading:
    description: "Include the version as a heading in the changelog"
    required: false
    default: true
  include-compare-link:
    description: "Include a compare link in the changelog"
    required: false
    default: true
  include-links:
    description: "Include links to issues and commits in the changelog"
    required: false
    default: true
  custom-emoji:
    description: "Custom emoji for changelog filter"
    required: false
    default: "featureðŸŒŸ,nugetðŸ“¦,choreðŸ§¹"
outputs:
  changelog:
    description: "Changelog"
    value: ${{ steps.changelog-output.outputs.changelog }}
runs:
  using: "composite"
  steps:
    - name: Set environment variables
      id: set-env
      shell: bash
      run: |
        HEAD_REF=${{ inputs.head-ref }}
        if [ -z "$HEAD_REF" ]; then
          HEAD_REF=${{ inputs.version }}
        fi

        BASE_REF=${{ inputs.base-ref }}
        if [ -z "$BASE_REF" ]; then
          BASE_REF=${{ inputs.previous-version }}
        fi

        echo "HEAD_REF=$HEAD_REF"
        echo "BASE_REF=$BASE_REF"

        echo "TARGET_VERSION=${{ inputs.version }}"
        echo "PREVIOUS_VERSION=${{ inputs.previous-version }}"

        echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
        echo "BASE_REF=$BASE_REF" >> $GITHUB_ENV
        echo "TARGET_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "PREVIOUS_VERSION=${{ inputs.previous-version }}" >> $GITHUB_ENV
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Find previous version
      if: ${{ env.BASE_REF == '' }}
      id: find-previous-tag
      shell: pwsh
      env:
        VERSION: ${{ inputs.version }}
      run: |
        $previousVersion = & ./getPreviousVersion.ps1 -version $env:VERSION
        echo "BASE_REF=$previousVersion" >> $env:GITHUB_ENV
    - name: Validate previous version
      shell: bash
      run: |
        if [ -z "${{ env.BASE_REF }}" ]; then
          echo "No previous version found, skipping changelog generation"
          exit 1
        fi

        echo "Previous version: ${{ env.BASE_REF }}"
        echo "PREVIOUS_VERSION=${{ env.BASE_REF }}" >> $GITHUB_ENV
    - name: Generate changelog
      id: generate-changelog
      uses: jaywcjlove/changelog-generator@main
      with:
        head-ref: ${{ env.HEAD_REF }}
        base-ref: ${{ env.BASE_REF }}
        token: ${{ inputs.github-token }}
        filter-author: (jcdcdev|dependabot|renovate\\[bot\\]|dependabot\\[bot\\]|Renovate Bot)
        filter: '(\+semver:\s?(breaking|major|feature|minor|fix|patch)|\+changelog-ignore:.*|Merge.*)'
        custom-emoji: ${{ inputs.custom-emoji }}
    - name: Create Changelog Body
      shell: pwsh
      id: changelog
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPO: "${{ github.repository_owner }}/${{ github.event.repository.name }}"
        CHANGELOG: |
          ${{ steps.generate-changelog.outputs.changelog }}
      run: |
        $changelog = ""
        if ("${{ inputs.include-version-as-heading }}" -eq "true") {
          $changelog = "### Changes in ${{ env.TARGET_VERSION }}`n`n"
        }

        if ("${{ inputs.include-compare-link }}" -eq "true") {
          $COMPARE_TEXT = "${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}}"
          # change - to escaped html code
          $COMPARE_TEXT = $COMPARE_TEXT -replace "-", "--"
          $changelog = $changelog + "[![Compare](https://img.shields.io/badge/Compare-$COMPARE_TEXT-394933?style=flat&logo=github)](https://github.com/${{ github.repository }}/compare/${{ env.PREVIOUS_VERSION }}...${{env.TARGET_VERSION}})`n`n"
        }
        
        $changelog = $changelog + $env:CHANGELOG

        if ("${{ inputs.include-links }}" -eq "true") {
          Write-Host "Searching for issues in changelog"
          $terms = 'close', 'closes', 'closed', 'fix', 'fixes', 'fixed', 'resolve', 'resolves', 'resolved'
          $terms | ForEach-Object {
            $changelog = $changelog -replace "($_ #(\d+))", '[Issue #$2](https://github.com/${{ env.REPO }}/issues/$2)'
          }
          
          Write-Host "Searching for commits in changelog"
          $commit_hashes = git log --pretty=format:"%h"
          $commit_hashes | ForEach-Object {
            $commit_hash = $_
            $changelog = $changelog -replace "($commit_hash)", "[$commit_hash](https://github.com/${{ env.REPO }}/commit/$commit_hash)"
          }
        }
        
        $changelog = $changelog -replace '\n', "`n"
        Set-Content -Path ./changelog.md -Value $changelog -NoNewline

        Write-Host "`n`nCHANGELOG:`n`n$changelog`n`n"
    - name: Set Changelog Output
      shell: bash
      id: changelog-output
      run: |
        changelog=$(cat ./changelog.md)
        {
          echo 'changelog<<EOF'
          echo "${changelog}"
          echo EOF
        } >> "$GITHUB_OUTPUT"  